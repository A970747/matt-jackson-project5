{"version":3,"sources":["dictionary.js","DisplayDefs.jsx","App.js","serviceWorker.js","index.js"],"names":["dictionary","DisplayDefs","setDefinitions","axios","url","props","queryProp","method","dataType","params","key","then","response","filteredArray","data","filter","each","hwi","hw","replace","state","queryWord","setState","definitionArray","length","meta","stems","includes","rebaseWord","catch","catchFunction","prevProps","this","map","index","fl","shortdef","s","className","Component","App","setQuery","number","Math","floor","random","handleChange","event","currentTarget","value","userInput","target","toLowerCase","nextWord","correctWords","push","rightWrong","handleSubmit","preventDefault","handleQuit","missedWords","updatedWord","definitionList","action","htmlFor","onChange","type","id","placeholder","onClick","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"mSAEeA,EAFI,CAAC,QAAQ,QAAQ,YAAY,UAAU,WAAW,YAAY,UAAU,SAAS,SAAS,OAAO,WAAW,SAAS,aAAa,WAAW,YAAY,WAAW,SAAS,SAAS,WAAW,YAAY,aAAa,SAAS,WAAW,UAAU,SAAS,aAAa,aAAa,aAAa,UAAU,WAAW,WAAW,OAAO,SAAS,WAAW,QAAQ,MAAM,SAAS,WAAW,QAAQ,WAAW,SAAS,UAAU,YAAY,MAAM,WAAW,WAAW,WAAW,YAAY,aAAa,SAAS,QAAQ,WAAW,cAAc,gBAAgB,SAAS,SAAS,SAAS,SAAS,YAAY,YAAY,eAAe,aAAa,YAAY,QAAQ,YAAY,YAAY,QAAQ,MAAM,WAAW,UAAU,OAAO,QAAQ,YAAY,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,WAAW,QAAQ,UAAU,YAAY,YAAY,SAAS,QAAQ,QAAQ,SAAS,YAAY,UAAU,UAAU,QAAQ,QAAQ,QAAQ,SAAS,WAAW,WAAW,QAAQ,UAAU,WAAW,SAAS,OAAO,UAAU,YAAY,YAAY,YAAY,UAAU,SAAS,UAAU,YAAY,aAAa,WAAW,UAAU,UAAU,OAAO,QAAQ,WAAW,aAAa,MAAM,OAAO,WAAW,UAAU,SAAS,SAAS,WAAW,MAAM,UAAU,MAAM,WAAW,WAAW,cAAc,SAAS,SAAS,UAAU,SAAS,UAAU,aAAa,aAAa,OAAO,aAAa,YAAY,YAAY,YAAY,UAAU,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,YAAY,SAAS,OAAO,OAAO,MAAM,QAAQ,MAAM,OAAO,OAAO,UAAU,OAAO,MAAM,OAAO,YAAY,OAAO,OAAO,WAAW,UAAU,QAAQ,SAAS,aAAa,MAAM,OAAO,QAAQ,SAAS,QAAQ,OAAO,OAAO,OAAO,YAAY,MAAM,UAAU,MAAM,OAAO,YAAY,MAAM,WAAW,SAAS,WAAW,SAAS,UAAU,OAAO,cAAc,SAAS,aAAa,OAAO,QAAQ,UAAU,OAAO,SAAS,aAAa,MAAM,OAAO,UAAU,OAAO,QAAQ,WAAW,MAAM,OAAO,SAAS,UAAU,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,OAAO,OAAO,OAAO,QAAQ,WAAW,QAAQ,QAAQ,OAAO,OAAO,UAAU,OAAO,OAAO,OAAO,OAAO,UAAU,OAAO,SAAS,OAAO,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,WAAW,YAAY,MAAM,MAAM,MAAM,SAAS,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,SAAS,YAAY,SAAS,UAAU,SAAS,QAAQ,SAAS,QAAQ,SAAS,QAAQ,SAAS,UAAU,QAAQ,SAAS,QAAQ,SAAS,SAAS,WAAW,OAAO,OAAO,QAAQ,QAAQ,OAAO,QAAQ,OAAO,SAAS,WAAW,WAAW,OAAO,SAAS,SAAS,OAAO,UAAU,QAAQ,SAAS,QAAQ,OAAO,YAAY,cAAc,aAAa,WAAW,OAAO,UAAU,OAAO,SAAS,OAAO,MAAM,SAAS,SAAS,MAAM,UAAU,aAAa,UAAU,MAAM,OAAO,OAAO,UAAU,WAAW,SAAS,YAAY,WAAW,QAAQ,OAAO,QAAQ,OAAO,MAAM,SAAS,QAAQ,WAAW,OAAO,YAAY,SAAS,SAAS,WAAW,OAAO,UAAU,QAAQ,YAAY,SAAS,SAAS,aAAa,UAAU,SAAS,WAAW,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,WAAW,SAAS,WAAW,WAAW,SAAS,QAAQ,OAAO,UAAU,QAAQ,YAAY,WAAW,SAAS,OAAO,aAAa,QAAQ,OAAO,SAAS,SAAS,SAAS,SAAS,QAAQ,OAAO,SAAS,OAAO,QAAQ,SAAS,QAAQ,QAAQ,SAAS,OAAO,aAAa,QAAQ,SAAS,QAAQ,SAAS,SAAS,OAAO,SAAS,YAAY,QAAQ,OAAO,QAAQ,OAAO,SAAS,WAAW,OAAO,OAAO,SAAS,UAAU,QAAQ,WAAW,WAAW,SAAS,OAAO,YAAY,cAAc,UAAU,YAAY,SAAS,cAAc,UAAU,UAAU,aAAa,UAAU,cAAc,WAAW,WAAW,UAAU,cAAc,UAAU,YAAY,YAAY,YAAY,UAAU,UAAU,WAAW,UAAU,aAAa,YAAY,WAAW,UAAU,UAAU,WAAW,UAAU,SAAS,OAAO,OAAO,cAAc,cAAc,SAAS,OAAO,OAAO,UAAU,QAAQ,QAAQ,UAAU,aAAa,QAAQ,MAAM,WAAW,SAAS,QAAQ,UAAU,QAAQ,QAAQ,SAAS,QAAQ,SAAS,QAAQ,QAAQ,UAAU,WAAW,SAAS,SAAS,OAAO,QAAQ,QAAQ,UAAU,QAAQ,OAAO,QAAQ,UAAU,QAAQ,QAAQ,QAAQ,MAAM,MAAM,SAAS,WAAW,aAAa,MAAM,OAAO,UAAU,OAAO,QAAQ,U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AAY,UAAU,cAAc,QAAQ,QAAQ,UAAU,SAAS,QAAQ,QAAQ,YAAY,WAAW,WAAW,QAAQ,SAAS,SAAS,QAAQ,OAAO,WAAW,UAAU,SAAS,QAAQ,SAAS,SAAS,WAAW,MAAM,UAAU,SAAS,SAAS,SAAS,SAAS,YAAY,YAAY,UAAU,WAAW,QAAQ,QAAQ,UAAU,QAAQ,QAAQ,WAAW,OAAO,QAAQ,QAAQ,YAAY,UAAU,aAAa,OAAO,YAAY,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,cAAc,OAAO,QAAQ,SAAS,QAAQ,cAAc,SAAS,OAAO,SAAS,WAAW,UAAU,QAAQ,OAAO,QAAQ,SAAS,QAAQ,QAAQ,WAAW,UAAU,WAAW,QAAQ,QAAQ,SAAS,SAAS,aAAa,UAAU,SAAS,QAAQ,UAAU,SAAS,SAAS,YAAY,QAAQ,aAAa,SAAS,SAAS,UAAU,aAAa,YAAY,cAAc,WAAW,UAAU,aAAa,WAAW,OAAO,SAAS,SAAS,QAAQ,UAAU,aAAa,OAAO,QAAQ,SAAS,MAAM,QAAQ,SAAS,cAAc,SAAS,UAAU,UAAU,UAAU,WAAW,WAAW,UAAU,UAAU,SAAS,UAAU,QAAQ,aAAa,QAAQ,OAAO,QAAQ,SAAS,cAAc,aAAa,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,WAAW,OAAO,OAAO,OAAO,MAAM,WAAW,QAAQ,OAAO,MAAM,OAAO,QAAQ,WAAW,YAAY,QAAQ,SAAS,MAAM,WAAW,OAAO,UAAU,QAAQ,UAAU,QAAQ,QAAQ,YAAY,UAAU,SAAS,YAAY,QAAQ,MAAM,WAAW,SAAS,QAAQ,OAAO,UAAU,WAAW,WAAW,UAAU,YAAY,OAAO,SAAS,QAAQ,UAAU,QAAQ,WAAW,OAAO,SAAS,cAAc,QAAQ,OAAO,QAAQ,YAAY,QAAQ,UAAU,UAAU,aAAa,cAAc,SAAS,cAAc,QAAQ,SAAS,SAAS,SAAS,QAAQ,UAAU,aAAa,OAAO,SAAS,SAAS,OAAO,MAAM,QAAQ,QAAQ,cAAc,OAAO,MAAM,OAAO,MAAM,OAAO,QAAQ,WAAW,QAAQ,OAAO,MAAM,WAAW,SAAS,QAAQ,aAAa,aAAa,YAAY,MAAM,SAAS,QAAQ,QAAQ,OAAO,MAAM,WAAW,OAAO,MAAM,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,WAAW,Y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","file":"static/js/main.1cd81684.chunk.js","sourcesContent":["const dictionary = [\"aback\",\"abaft\",\"abandoned\",\"abashed\",\"aberrant\",\"abhorrent\",\"abiding\",\"abject\",\"ablaze\",\"able\",\"abnormal\",\"aboard\",\"aboriginal\",\"abortive\",\"abounding\",\"abrasive\",\"abrupt\",\"absent\",\"absorbed\",\"absorbing\",\"abstracted\",\"absurd\",\"abundant\",\"abusive\",\"accept\",\"acceptable\",\"accessible\",\"accidental\",\"account\",\"accurate\",\"achiever\",\"acid\",\"acidic\",\"acoustic\",\"acrid\",\"act\",\"action\",\"activity\",\"actor\",\"actually\",\"ad hoc\",\"adamant\",\"adaptable\",\"add\",\"addicted\",\"addition\",\"adhesive\",\"adjoining\",\"adjustment\",\"admire\",\"admit\",\"adorable\",\"adventurous\",\"advertisement\",\"advice\",\"advise\",\"afford\",\"afraid\",\"aftermath\",\"afternoon\",\"afterthought\",\"aggressive\",\"agonizing\",\"agree\",\"agreeable\",\"agreement\",\"ahead\",\"air\",\"airplane\",\"airport\",\"ajar\",\"alarm\",\"alcoholic\",\"alert\",\"alike\",\"alive\",\"alleged\",\"allow\",\"alluring\",\"aloof\",\"amazing\",\"ambiguous\",\"ambitious\",\"amount\",\"amuck\",\"amuse\",\"amused\",\"amusement\",\"amusing\",\"ancient\",\"anger\",\"angle\",\"angry\",\"animal\",\"animated\",\"announce\",\"annoy\",\"annoyed\",\"annoying\",\"answer\",\"ants\",\"anxious\",\"apathetic\",\"apologise\",\"apparatus\",\"apparel\",\"appear\",\"applaud\",\"appliance\",\"appreciate\",\"approval\",\"approve\",\"aquatic\",\"arch\",\"argue\",\"argument\",\"arithmetic\",\"arm\",\"army\",\"aromatic\",\"arrange\",\"arrest\",\"arrive\",\"arrogant\",\"art\",\"ashamed\",\"ask\",\"aspiring\",\"assorted\",\"astonishing\",\"attach\",\"attack\",\"attempt\",\"attend\",\"attract\",\"attraction\",\"attractive\",\"aunt\",\"auspicious\",\"authority\",\"automatic\",\"available\",\"average\",\"avoid\",\"awake\",\"aware\",\"awesome\",\"awful\",\"axiomatic\",\"babies\",\"baby\",\"back\",\"bad\",\"badge\",\"bag\",\"bait\",\"bake\",\"balance\",\"ball\",\"ban\",\"bang\",\"barbarous\",\"bare\",\"base\",\"baseball\",\"bashful\",\"basin\",\"basket\",\"basketball\",\"bat\",\"bath\",\"bathe\",\"battle\",\"bawdy\",\"bead\",\"beam\",\"bear\",\"beautiful\",\"bed\",\"bedroom\",\"bee\",\"beef\",\"befitting\",\"beg\",\"beginner\",\"behave\",\"behavior\",\"belief\",\"believe\",\"bell\",\"belligerent\",\"belong\",\"beneficial\",\"bent\",\"berry\",\"berserk\",\"best\",\"better\",\"bewildered\",\"big\",\"bike\",\"billowy\",\"bird\",\"birth\",\"birthday\",\"bit\",\"bite\",\"bitter\",\"bizarre\",\"black\",\"blade\",\"bleach\",\"bless\",\"blind\",\"blink\",\"blood\",\"bloody\",\"blot\",\"blow\",\"blue\",\"blush\",\"blushing\",\"board\",\"boast\",\"boat\",\"boil\",\"boiling\",\"bolt\",\"bomb\",\"bone\",\"book\",\"boorish\",\"boot\",\"border\",\"bore\",\"bored\",\"boring\",\"borrow\",\"bottle\",\"bounce\",\"bouncy\",\"boundary\",\"boundless\",\"bow\",\"box\",\"boy\",\"brainy\",\"brake\",\"branch\",\"brash\",\"brass\",\"brave\",\"brawny\",\"breakable\",\"breath\",\"breathe\",\"breezy\",\"brick\",\"bridge\",\"brief\",\"bright\",\"broad\",\"broken\",\"brother\",\"brown\",\"bruise\",\"brush\",\"bubble\",\"bucket\",\"building\",\"bulb\",\"bump\",\"bumpy\",\"burly\",\"burn\",\"burst\",\"bury\",\"bushes\",\"business\",\"bustling\",\"busy\",\"butter\",\"button\",\"buzz\",\"cabbage\",\"cable\",\"cactus\",\"cagey\",\"cake\",\"calculate\",\"calculating\",\"calculator\",\"calendar\",\"call\",\"callous\",\"calm\",\"camera\",\"camp\",\"can\",\"cannon\",\"canvas\",\"cap\",\"capable\",\"capricious\",\"caption\",\"car\",\"card\",\"care\",\"careful\",\"careless\",\"caring\",\"carpenter\",\"carriage\",\"carry\",\"cart\",\"carve\",\"cast\",\"cat\",\"cattle\",\"cause\",\"cautious\",\"cave\",\"ceaseless\",\"celery\",\"cellar\",\"cemetery\",\"cent\",\"certain\",\"chalk\",\"challenge\",\"chance\",\"change\",\"changeable\",\"channel\",\"charge\",\"charming\",\"chase\",\"cheap\",\"cheat\",\"check\",\"cheer\",\"cheerful\",\"cheese\",\"chemical\",\"cherries\",\"cherry\",\"chess\",\"chew\",\"chicken\",\"chief\",\"childlike\",\"children\",\"chilly\",\"chin\",\"chivalrous\",\"choke\",\"chop\",\"chubby\",\"chunky\",\"church\",\"circle\",\"claim\",\"clam\",\"clammy\",\"clap\",\"class\",\"classy\",\"clean\",\"clear\",\"clever\",\"clip\",\"cloistered\",\"close\",\"closed\",\"cloth\",\"cloudy\",\"clover\",\"club\",\"clumsy\",\"cluttered\",\"coach\",\"coal\",\"coast\",\"coat\",\"cobweb\",\"coherent\",\"coil\",\"cold\",\"collar\",\"collect\",\"color\",\"colorful\",\"colossal\",\"colour\",\"comb\",\"combative\",\"comfortable\",\"command\",\"committee\",\"common\",\"communicate\",\"company\",\"compare\",\"comparison\",\"compete\",\"competition\",\"complain\",\"complete\",\"complex\",\"concentrate\",\"concern\",\"concerned\",\"condemned\",\"condition\",\"confess\",\"confuse\",\"confused\",\"connect\",\"connection\",\"conscious\",\"consider\",\"consist\",\"contain\",\"continue\",\"control\",\"cooing\",\"cook\",\"cool\",\"cooperative\",\"coordinated\",\"copper\",\"copy\",\"corn\",\"correct\",\"cough\",\"count\",\"country\",\"courageous\",\"cover\",\"cow\",\"cowardly\",\"crabby\",\"crack\",\"cracker\",\"crash\",\"crate\",\"craven\",\"crawl\",\"crayon\",\"crazy\",\"cream\",\"creator\",\"creature\",\"credit\",\"creepy\",\"crib\",\"crime\",\"crook\",\"crooked\",\"cross\",\"crow\",\"crowd\",\"crowded\",\"crown\",\"cruel\",\"crush\",\"cry\",\"cub\",\"cuddly\",\"cultured\",\"cumbersome\",\"cup\",\"cure\",\"curious\",\"curl\",\"curly\",\"current\",\"curtain\",\"curve\",\"curved\",\"curvy\",\"cushion\",\"cut\",\"cute\",\"cycle\",\"cynical\",\"dad\",\"daffy\",\"daily\",\"dam\",\"damage\",\"damaged\",\"damaging\",\"damp\",\"dance\",\"dangerous\",\"dapper\",\"dare\",\"dark\",\"dashing\",\"daughter\",\"day\",\"dazzling\",\"dead\",\"deadpan\",\"deafening\",\"dear\",\"death\",\"debonair\",\"debt\",\"decay\",\"deceive\",\"decide\",\"decision\",\"decisive\",\"decorate\",\"decorous\",\"deep\",\"deeply\",\"deer\",\"defeated\",\"defective\",\"defiant\",\"degree\",\"delay\",\"delicate\",\"delicious\",\"delight\",\"delightful\",\"delirious\",\"deliver\",\"demonic\",\"depend\",\"dependent\",\"depressed\",\"deranged\",\"describe\",\"descriptive\",\"desert\",\"deserted\",\"deserve\",\"design\",\"desire\",\"desk\",\"destroy\",\"destruction\",\"detail\",\"detailed\",\"detect\",\"determined\",\"develop\",\"development\",\"devilish\",\"didactic\",\"different\",\"difficult\",\"digestion\",\"diligent\",\"dime\",\"dinner\",\"dinosaurs\",\"direction\",\"direful\",\"dirt\",\"dirty\",\"disagree\",\"disagreeable\",\"disappear\",\"disapprove\",\"disarm\",\"disastrous\",\"discover\",\"discovery\",\"discreet\",\"discussion\",\"disgusted\",\"disgusting\",\"disillusioned\",\"dislike\",\"dispensable\",\"distance\",\"distinct\",\"distribution\",\"disturbed\",\"divergent\",\"divide\",\"division\",\"dizzy\",\"dock\",\"doctor\",\"dog\",\"doll\",\"domineering\",\"donkey\",\"door\",\"double\",\"doubt\",\"doubtful\",\"downtown\",\"drab\",\"draconian\",\"drag\",\"drain\",\"dramatic\",\"drawer\",\"dream\",\"dreary\",\"dress\",\"drink\",\"drip\",\"driving\",\"drop\",\"drown\",\"drum\",\"drunk\",\"dry\",\"duck\",\"dull\",\"dust\",\"dusty\",\"dynamic\",\"dysfunctional\",\"eager\",\"ear\",\"early\",\"earn\",\"earsplitting\",\"earth\",\"earthquake\",\"earthy\",\"easy\",\"eatable\",\"economic\",\"edge\",\"educate\",\"educated\",\"education\",\"effect\",\"efficacious\",\"efficient\",\"egg\",\"eggnog\",\"eight\",\"elastic\",\"elated\",\"elbow\",\"elderly\",\"electric\",\"elegant\",\"elfin\",\"elite\",\"embarrass\",\"embarrassed\",\"eminent\",\"employ\",\"empty\",\"enchanted\",\"enchanting\",\"encourage\",\"encouraging\",\"end\",\"endurable\",\"energetic\",\"engine\",\"enjoy\",\"enormous\",\"enter\",\"entertain\",\"entertaining\",\"enthusiastic\",\"envious\",\"equable\",\"equal\",\"erect\",\"erratic\",\"error\",\"escape\",\"ethereal\",\"evanescent\",\"evasive\",\"even\",\"event\",\"examine\",\"example\",\"excellent\",\"exchange\",\"excite\",\"excited\",\"exciting\",\"exclusive\",\"excuse\",\"exercise\",\"exist\",\"existence\",\"exotic\",\"expand\",\"expansion\",\"expect\",\"expensive\",\"experience\",\"expert\",\"explain\",\"explode\",\"extend\",\"exuberant\",\"exultant\",\"eye\",\"fabulous\",\"face\",\"fact\",\"fade\",\"faded\",\"fail\",\"faint\",\"fair\",\"fairies\",\"faithful\",\"fall\",\"fallacious\",\"false\",\"familiar\",\"famous\",\"fanatical\",\"fancy\",\"fang\",\"fantastic\",\"far\",\"farm\",\"fascinated\",\"fast\",\"fasten\",\"fat\",\"faulty\",\"fax\",\"fear\",\"fearful\",\"fearless\",\"feeble\",\"feeling\",\"feigned\",\"female\",\"fence\",\"fertile\",\"festive\",\"fetch\",\"few\",\"field\",\"fierce\",\"file\",\"fill\",\"film\",\"filthy\",\"fine\",\"finger\",\"finicky\",\"fire\",\"fireman\",\"first\",\"fish\",\"fit\",\"five\",\"fix\",\"fixed\",\"flag\",\"flagrant\",\"flaky\",\"flame\",\"flap\",\"flash\",\"flashy\",\"flat\",\"flavor\",\"flawless\",\"flesh\",\"flight\",\"flimsy\",\"flippant\",\"float\",\"flock\",\"flood\",\"floor\",\"flow\",\"flower\",\"flowery\",\"fluffy\",\"fluttering\",\"fly\",\"foamy\",\"fog\",\"fold\",\"follow\",\"food\",\"fool\",\"foolish\",\"foot\",\"force\",\"foregoing\",\"forgetful\",\"fork\",\"form\",\"fortunate\",\"found\",\"four\",\"fowl\",\"fragile\",\"frail\",\"frame\",\"frantic\",\"free\",\"freezing\",\"frequent\",\"fresh\",\"fretful\",\"friction\",\"friend\",\"friendly\",\"frighten\",\"frightened\",\"frightening\",\"frog\",\"front\",\"fruit\",\"fry\",\"fuel\",\"full\",\"fumbling\",\"functional\",\"funny\",\"furniture\",\"furry\",\"furtive\",\"future\",\"futuristic\",\"fuzzy\",\"gabby\",\"gainful\",\"gamy\",\"gaping\",\"garrulous\",\"gate\",\"gather\",\"gaudy\",\"gaze\",\"geese\",\"general\",\"gentle\",\"ghost\",\"giant\",\"giddy\",\"gifted\",\"gigantic\",\"giraffe\",\"girl\",\"glamorous\",\"glass\",\"gleaming\",\"glib\",\"glistening\",\"glorious\",\"glossy\",\"glove\",\"glow\",\"glue\",\"godly\",\"gold\",\"good\",\"goofy\",\"gorgeous\",\"government\",\"governor\",\"grab\",\"graceful\",\"grade\",\"grain\",\"grandfather\",\"grandiose\",\"grandmother\",\"grape\",\"grass\",\"grate\",\"grateful\",\"gratis\",\"gray\",\"grease\",\"greasy\",\"great\",\"greedy\",\"green\",\"greet\",\"grey\",\"grieving\",\"grin\",\"grip\",\"groan\",\"groovy\",\"grotesque\",\"grouchy\",\"ground\",\"group\",\"growth\",\"grubby\",\"gruesome\",\"grumpy\",\"guarantee\",\"guard\",\"guarded\",\"guess\",\"guide\",\"guiltless\",\"guitar\",\"gullible\",\"gun\",\"gusty\",\"guttural\",\"habitual\",\"hair\",\"haircut\",\"half\",\"hall\",\"hallowed\",\"halting\",\"hammer\",\"hand\",\"handle\",\"handsome\",\"handsomely\",\"handy\",\"hang\",\"hanging\",\"hapless\",\"happen\",\"happy\",\"harass\",\"harbor\",\"hard\",\"harm\",\"harmonious\",\"harmony\",\"harsh\",\"hat\",\"hate\",\"hateful\",\"haunt\",\"head\",\"heady\",\"heal\",\"health\",\"healthy\",\"heap\",\"heartbreaking\",\"heat\",\"heavenly\",\"heavy\",\"hellish\",\"help\",\"helpful\",\"helpless\",\"hesitant\",\"hideous\",\"high\",\"highfalutin\",\"hilarious\",\"hill\",\"hissing\",\"historical\",\"history\",\"hobbies\",\"hole\",\"holiday\",\"holistic\",\"hollow\",\"home\",\"homeless\",\"homely\",\"honey\",\"honorable\",\"hook\",\"hop\",\"hope\",\"horn\",\"horrible\",\"horse\",\"hose\",\"hospitable\",\"hospital\",\"hot\",\"hour\",\"house\",\"hover\",\"hug\",\"huge\",\"hulking\",\"hum\",\"humdrum\",\"humor\",\"humorous\",\"hungry\",\"hunt\",\"hurried\",\"hurry\",\"hurt\",\"hushed\",\"husky\",\"hydrant\",\"hypnotic\",\"hysterical\",\"ice\",\"icicle\",\"icky\",\"icy\",\"idea\",\"identify\",\"idiotic\",\"ignorant\",\"ignore\",\"ill\",\"illegal\",\"illustrious\",\"imaginary\",\"imagine\",\"immense\",\"imminent\",\"impartial\",\"imperfect\",\"impolite\",\"important\",\"imported\",\"impossible\",\"impress\",\"improve\",\"impulse\",\"incandescent\",\"include\",\"income\",\"incompetent\",\"inconclusive\",\"increase\",\"incredible\",\"industrious\",\"industry\",\"inexpensive\",\"infamous\",\"influence\",\"inform\",\"inject\",\"injure\",\"ink\",\"innate\",\"innocent\",\"inquisitive\",\"insect\",\"insidious\",\"instinctive\",\"instruct\",\"instrument\",\"insurance\",\"intelligent\",\"intend\",\"interest\",\"interesting\",\"interfere\",\"internal\",\"interrupt\",\"introduce\",\"invent\",\"invention\",\"invincible\",\"invite\",\"irate\",\"iron\",\"irritate\",\"irritating\",\"island\",\"itch\",\"itchy\",\"jaded\",\"jagged\",\"jail\",\"jam\",\"jar\",\"jazzy\",\"jealous\",\"jeans\",\"jelly\",\"jellyfish\",\"jewel\",\"jittery\",\"jobless\",\"jog\",\"join\",\"joke\",\"jolly\",\"joyous\",\"judge\",\"judicious\",\"juggle\",\"juice\",\"juicy\",\"jumbled\",\"jump\",\"jumpy\",\"juvenile\",\"kaput\",\"keen\",\"kettle\",\"key\",\"kick\",\"kill\",\"kind\",\"kindhearted\",\"kindly\",\"kiss\",\"kittens\",\"kitty\",\"knee\",\"kneel\",\"knife\",\"knit\",\"knock\",\"knot\",\"knotty\",\"knowing\",\"knowledge\",\"knowledgeable\",\"known\",\"label\",\"labored\",\"laborer\",\"lace\",\"lackadaisical\",\"lacking\",\"ladybug\",\"lake\",\"lame\",\"lamentable\",\"lamp\",\"land\",\"language\",\"languid\",\"large\",\"last\",\"late\",\"laugh\",\"laughable\",\"launch\",\"lavish\",\"lazy\",\"lean\",\"learn\",\"learned\",\"leather\",\"left\",\"leg\",\"legal\",\"lethal\",\"letter\",\"lettuce\",\"level\",\"lewd\",\"library\",\"license\",\"lick\",\"lie\",\"light\",\"lighten\",\"like\",\"likeable\",\"limit\",\"limping\",\"line\",\"linen\",\"lip\",\"liquid\",\"list\",\"listen\",\"literate\",\"little\",\"live\",\"lively\",\"living\",\"load\",\"loaf\",\"lock\",\"locket\",\"lonely\",\"long\",\"longing\",\"look\",\"loose\",\"lopsided\",\"loss\",\"loud\",\"loutish\",\"love\",\"lovely\",\"loving\",\"low\",\"lowly\",\"lucky\",\"ludicrous\",\"lumber\",\"lumpy\",\"lunch\",\"lunchroom\",\"lush\",\"luxuriant\",\"lying\",\"lyrical\",\"macabre\",\"machine\",\"macho\",\"maddening\",\"madly\",\"magenta\",\"magic\",\"magical\",\"magnificent\",\"maid\",\"mailbox\",\"majestic\",\"makeshift\",\"male\",\"malicious\",\"mammoth\",\"manage\",\"maniacal\",\"many\",\"marble\",\"march\",\"mark\",\"marked\",\"market\",\"married\",\"marry\",\"marvelous\",\"mask\",\"mass\",\"massive\",\"match\",\"mate\",\"material\",\"materialistic\",\"matter\",\"mature\",\"meal\",\"mean\",\"measly\",\"measure\",\"meat\",\"meaty\",\"meddle\",\"medical\",\"meek\",\"meeting\",\"mellow\",\"melodic\",\"melt\",\"melted\",\"memorise\",\"memory\",\"men\",\"mend\",\"merciful\",\"mere\",\"mess up\",\"messy\",\"metal\",\"mice\",\"middle\",\"mighty\",\"military\",\"milk\",\"milky\",\"mind\",\"mindless\",\"mine\",\"miniature\",\"minister\",\"minor\",\"mint\",\"minute\",\"miscreant\",\"miss\",\"mist\",\"misty\",\"mitten\",\"mix\",\"mixed\",\"moan\",\"moaning\",\"modern\",\"moldy\",\"mom\",\"momentous\",\"money\",\"monkey\",\"month\",\"moon\",\"moor\",\"morning\",\"mother\",\"motion\",\"motionless\",\"mountain\",\"mountainous\",\"mourn\",\"mouth\",\"move\",\"muddle\",\"muddled\",\"mug\",\"multiply\",\"mundane\",\"murder\",\"murky\",\"muscle\",\"mushy\",\"mute\",\"mysterious\",\"nail\",\"naive\",\"name\",\"nappy\",\"narrow\",\"nasty\",\"nation\",\"natural\",\"naughty\",\"nauseating\",\"near\",\"neat\",\"nebulous\",\"necessary\",\"neck\",\"need\",\"needle\",\"needless\",\"needy\",\"neighborly\",\"nerve\",\"nervous\",\"nest\",\"new\",\"next\",\"nice\",\"nifty\",\"night\",\"nimble\",\"nine\",\"nippy\",\"nod\",\"noise\",\"noiseless\",\"noisy\",\"nonchalant\",\"nondescript\",\"nonstop\",\"normal\",\"north\",\"nose\",\"nostalgic\",\"nosy\",\"note\",\"notebook\",\"notice\",\"noxious\",\"null\",\"number\",\"numberless\",\"numerous\",\"nut\",\"nutritious\",\"nutty\",\"oafish\",\"oatmeal\",\"obedient\",\"obeisant\",\"obese\",\"obey\",\"object\",\"obnoxious\",\"obscene\",\"obsequious\",\"observant\",\"observation\",\"observe\",\"obsolete\",\"obtain\",\"obtainable\",\"occur\",\"ocean\",\"oceanic\",\"odd\",\"offbeat\",\"offend\",\"offer\",\"office\",\"oil\",\"old\",\"omniscient\",\"one\",\"onerous\",\"open\",\"opposite\",\"optimal\",\"orange\",\"order\",\"ordinary\",\"organic\",\"ossified\",\"outgoing\",\"outrageous\",\"outstanding\",\"oval\",\"oven\",\"overconfident\",\"overflow\",\"overjoyed\",\"overrated\",\"overt\",\"overwrought\",\"owe\",\"own\",\"pack\",\"paddle\",\"page\",\"pail\",\"painful\",\"painstaking\",\"paint\",\"pale\",\"paltry\",\"pan\",\"pancake\",\"panicky\",\"panoramic\",\"paper\",\"parallel\",\"parcel\",\"parched\",\"park\",\"parsimonious\",\"part\",\"partner\",\"party\",\"pass\",\"passenger\",\"past\",\"paste\",\"pastoral\",\"pat\",\"pathetic\",\"pause\",\"payment\",\"peace\",\"peaceful\",\"pear\",\"peck\",\"pedal\",\"peel\",\"peep\",\"pen\",\"pencil\",\"penitent\",\"perfect\",\"perform\",\"periodic\",\"permissible\",\"permit\",\"perpetual\",\"person\",\"pest\",\"pet\",\"petite\",\"phobic\",\"phone\",\"physical\",\"picayune\",\"pick\",\"pickle\",\"picture\",\"pie\",\"pig\",\"pin\",\"pinch\",\"pine\",\"pink\",\"pipe\",\"piquant\",\"pizzas\",\"place\",\"placid\",\"plain\",\"plan\",\"plane\",\"plant\",\"plantation\",\"plastic\",\"plate\",\"plausible\",\"play\",\"playground\",\"pleasant\",\"please\",\"pleasure\",\"plot\",\"plough\",\"plucky\",\"plug\",\"pocket\",\"point\",\"pointless\",\"poised\",\"poison\",\"poke\",\"polish\",\"polite\",\"political\",\"pollution\",\"poor\",\"pop\",\"popcorn\",\"porter\",\"position\",\"possess\",\"possessive\",\"possible\",\"post\",\"pot\",\"potato\",\"pour\",\"powder\",\"power\",\"powerful\",\"practise\",\"pray\",\"preach\",\"precede\",\"precious\",\"prefer\",\"premium\",\"prepare\",\"present\",\"preserve\",\"press\",\"pretend\",\"pretty\",\"prevent\",\"previous\",\"price\",\"pricey\",\"prick\",\"prickly\",\"print\",\"private\",\"probable\",\"produce\",\"productive\",\"profit\",\"profuse\",\"program\",\"promise\",\"property\",\"prose\",\"protect\",\"protective\",\"protest\",\"proud\",\"provide\",\"psychedelic\",\"psychotic\",\"public\",\"puffy\",\"pull\",\"pump\",\"pumped\",\"punch\",\"puncture\",\"punish\",\"punishment\",\"puny\",\"purple\",\"purpose\",\"purring\",\"push\",\"pushy\",\"puzzled\",\"puzzling\",\"quack\",\"quaint\",\"quarrelsome\",\"quarter\",\"quartz\",\"queen\",\"question\",\"questionable\",\"queue\",\"quick\",\"quickest\",\"quicksand\",\"quiet\",\"quill\",\"quilt\",\"quince\",\"quirky\",\"quiver\",\"quixotic\",\"quizzical\",\"rabbit\",\"rabid\",\"race\",\"racial\",\"radiate\",\"ragged\",\"rail\",\"railway\",\"rain\",\"rainstorm\",\"rainy\",\"raise\",\"rake\",\"rambunctious\",\"rampant\",\"range\",\"rapid\",\"rare\",\"raspy\",\"rat\",\"rate\",\"ratty\",\"ray\",\"reach\",\"reaction\",\"reading\",\"ready\",\"real\",\"realise\",\"reason\",\"rebel\",\"receipt\",\"receive\",\"receptive\",\"recess\",\"recognise\",\"recondite\",\"record\",\"red\",\"reduce\",\"redundant\",\"reflect\",\"reflective\",\"refuse\",\"regret\",\"regular\",\"reign\",\"reject\",\"rejoice\",\"relation\",\"relax\",\"release\",\"relieved\",\"religion\",\"rely\",\"remain\",\"remarkable\",\"remember\",\"remind\",\"reminiscent\",\"remove\",\"repair\",\"repeat\",\"replace\",\"reply\",\"report\",\"representative\",\"reproduce\",\"repulsive\",\"request\",\"rescue\",\"resolute\",\"resonant\",\"respect\",\"responsible\",\"rest\",\"retire\",\"return\",\"reward\",\"rhetorical\",\"rhyme\",\"rhythm\",\"rice\",\"rich\",\"riddle\",\"rifle\",\"right\",\"righteous\",\"rightful\",\"rigid\",\"ring\",\"rinse\",\"ripe\",\"risk\",\"ritzy\",\"river\",\"road\",\"roasted\",\"rob\",\"robin\",\"robust\",\"rock\",\"rod\",\"roll\",\"romantic\",\"roof\",\"room\",\"roomy\",\"root\",\"rose\",\"rot\",\"rotten\",\"rough\",\"round\",\"route\",\"royal\",\"rub\",\"ruddy\",\"rude\",\"ruin\",\"rule\",\"run\",\"rural\",\"rush\",\"rustic\",\"ruthless\",\"sable\",\"sack\",\"sad\",\"safe\",\"sail\",\"salt\",\"salty\",\"same\",\"sand\",\"sassy\",\"satisfy\",\"satisfying\",\"save\",\"savory\",\"saw\",\"scale\",\"scandalous\",\"scarce\",\"scare\",\"scarecrow\",\"scared\",\"scarf\",\"scary\",\"scatter\",\"scattered\",\"scene\",\"scent\",\"school\",\"science\",\"scientific\",\"scintillating\",\"scissors\",\"scold\",\"scorch\",\"scrape\",\"scratch\",\"scrawny\",\"scream\",\"screeching\",\"screw\",\"scribble\",\"scrub\",\"sea\",\"seal\",\"search\",\"seashore\",\"seat\",\"second\",\"secret\",\"secretary\",\"secretive\",\"sedate\",\"seed\",\"seemly\",\"selection\",\"selective\",\"self\",\"selfish\",\"sense\",\"separate\",\"serious\",\"servant\",\"serve\",\"settle\",\"shade\",\"shaggy\",\"shake\",\"shaky\",\"shallow\",\"shame\",\"shape\",\"share\",\"sharp\",\"shave\",\"sheep\",\"sheet\",\"shelf\",\"shelter\",\"shiny\",\"ship\",\"shirt\",\"shiver\",\"shivering\",\"shock\",\"shocking\",\"shoe\",\"shop\",\"short\",\"show\",\"shrill\",\"shrug\",\"shut\",\"shy\",\"sick\",\"side\",\"sidewalk\",\"sigh\",\"sign\",\"signal\",\"silent\",\"silk\",\"silky\",\"silly\",\"silver\",\"simple\",\"simplistic\",\"sin\",\"sincere\",\"sink\",\"sip\",\"sister\",\"six\",\"size\",\"skate\",\"ski\",\"skillful\",\"skin\",\"skinny\",\"skip\",\"skirt\",\"sky\",\"slap\",\"slave\",\"sleep\",\"sleepy\",\"sleet\",\"slim\",\"slimy\",\"slip\",\"slippery\",\"slope\",\"sloppy\",\"slow\",\"small\",\"smart\",\"smash\",\"smell\",\"smelly\",\"smile\",\"smiling\",\"smoggy\",\"smoke\",\"smooth\",\"snail\",\"snake\",\"snatch\",\"sneaky\",\"sneeze\",\"sniff\",\"snobbish\",\"snore\",\"snotty\",\"snow\",\"soak\",\"soap\",\"society\",\"sock\",\"soda\",\"sofa\",\"soft\",\"soggy\",\"solid\",\"somber\",\"son\",\"song\",\"soothe\",\"sophisticated\",\"sordid\",\"sore\",\"sort\",\"sound\",\"soup\",\"sour\",\"space\",\"spade\",\"spare\",\"spark\",\"sparkle\",\"sparkling\",\"special\",\"spectacular\",\"spell\",\"spicy\",\"spiders\",\"spiffy\",\"spiky\",\"spill\",\"spiritual\",\"spiteful\",\"splendid\",\"spoil\",\"sponge\",\"spooky\",\"spoon\",\"spot\",\"spotless\",\"spotted\",\"spotty\",\"spray\",\"spring\",\"sprout\",\"spurious\",\"spy\",\"squalid\",\"square\",\"squash\",\"squeak\",\"squeal\",\"squealing\",\"squeamish\",\"squeeze\",\"squirrel\",\"stage\",\"stain\",\"staking\",\"stale\",\"stamp\",\"standing\",\"star\",\"stare\",\"start\",\"statement\",\"station\",\"statuesque\",\"stay\",\"steadfast\",\"steady\",\"steam\",\"steel\",\"steep\",\"steer\",\"stem\",\"step\",\"stereotyped\",\"stew\",\"stick\",\"sticky\",\"stiff\",\"stimulating\",\"stingy\",\"stir\",\"stitch\",\"stocking\",\"stomach\",\"stone\",\"stop\",\"store\",\"stormy\",\"story\",\"stove\",\"straight\",\"strange\",\"stranger\",\"strap\",\"straw\",\"stream\",\"street\",\"strengthen\",\"stretch\",\"string\",\"strip\",\"striped\",\"stroke\",\"strong\",\"structure\",\"stuff\",\"stupendous\",\"stupid\",\"sturdy\",\"subdued\",\"subsequent\",\"substance\",\"substantial\",\"subtract\",\"succeed\",\"successful\",\"succinct\",\"suck\",\"sudden\",\"suffer\",\"sugar\",\"suggest\",\"suggestion\",\"suit\",\"sulky\",\"summer\",\"sun\",\"super\",\"superb\",\"superficial\",\"supply\",\"support\",\"suppose\",\"supreme\",\"surprise\",\"surround\",\"suspect\",\"suspend\",\"swanky\",\"sweater\",\"sweet\",\"sweltering\",\"swift\",\"swim\",\"swing\",\"switch\",\"symptomatic\",\"synonymous\",\"system\",\"table\",\"taboo\",\"tacit\",\"tacky\",\"tail\",\"talented\",\"talk\",\"tall\",\"tame\",\"tan\",\"tangible\",\"tangy\",\"tank\",\"tap\",\"tart\",\"taste\",\"tasteful\",\"tasteless\",\"tasty\",\"tawdry\",\"tax\",\"teaching\",\"team\",\"tearful\",\"tease\",\"tedious\",\"teeny\",\"teeth\",\"telephone\",\"telling\",\"temper\",\"temporary\",\"tempt\",\"ten\",\"tendency\",\"tender\",\"tense\",\"tent\",\"tenuous\",\"terrible\",\"terrific\",\"terrify\",\"territory\",\"test\",\"tested\",\"testy\",\"texture\",\"thank\",\"thankful\",\"thaw\",\"theory\",\"therapeutic\",\"thick\",\"thin\",\"thing\",\"thinkable\",\"third\",\"thirsty\",\"thought\",\"thoughtful\",\"thoughtless\",\"thread\",\"threatening\",\"three\",\"thrill\",\"throat\",\"throne\",\"thumb\",\"thunder\",\"thundering\",\"tick\",\"ticket\",\"tickle\",\"tidy\",\"tie\",\"tiger\",\"tight\",\"tightfisted\",\"time\",\"tin\",\"tiny\",\"tip\",\"tire\",\"tired\",\"tiresome\",\"title\",\"toad\",\"toe\",\"tomatoes\",\"tongue\",\"tooth\",\"toothbrush\",\"toothpaste\",\"toothsome\",\"top\",\"torpid\",\"touch\",\"tough\",\"tour\",\"tow\",\"towering\",\"town\",\"toy\",\"trace\",\"trade\",\"trail\",\"train\",\"tramp\",\"tranquil\",\"transport\",\"trap\",\"trashy\",\"travel\",\"tray\",\"treat\",\"treatment\",\"tree\",\"tremble\",\"tremendous\",\"trick\",\"tricky\",\"trip\",\"trite\",\"trot\",\"trouble\",\"troubled\",\"trousers\",\"truck\",\"truculent\",\"true\",\"trust\",\"truthful\",\"try\",\"tub\",\"tug\",\"tumble\",\"turkey\",\"turn\",\"twig\",\"twist\",\"two\",\"type\",\"typical\",\"ubiquitous\",\"ugliest\",\"ugly\",\"ultra\",\"umbrella\",\"unable\",\"unaccountable\",\"unadvised\",\"unarmed\",\"unbecoming\",\"unbiased\",\"uncle\",\"uncovered\",\"understood\",\"underwear\",\"undesirable\",\"undress\",\"unequal\",\"unequaled\",\"uneven\",\"unfasten\",\"unhealthy\",\"uninterested\",\"unique\",\"unit\",\"unite\",\"unkempt\",\"unknown\",\"unlock\",\"unnatural\",\"unpack\",\"unruly\",\"unsightly\",\"unsuitable\",\"untidy\",\"unused\",\"unusual\",\"unwieldy\",\"unwritten\",\"upbeat\",\"uppity\",\"upset\",\"uptight\",\"use\",\"used\",\"useful\",\"useless\",\"utopian\",\"utter\",\"uttermost\",\"vacation\",\"vacuous\",\"vagabond\",\"vague\",\"valuable\",\"value\",\"van\",\"vanish\",\"various\",\"vase\",\"vast\",\"vegetable\",\"veil\",\"vein\",\"vengeful\",\"venomous\",\"verdant\",\"verse\",\"versed\",\"vessel\",\"vest\",\"victorious\",\"view\",\"vigorous\",\"violent\",\"violet\",\"visit\",\"visitor\",\"vivacious\",\"voice\",\"voiceless\",\"volatile\",\"volcano\",\"volleyball\",\"voracious\",\"voyage\",\"vulgar\",\"wacky\",\"waggish\",\"wail\",\"wait\",\"waiting\",\"wakeful\",\"walk\",\"wall\",\"wander\",\"wandering\",\"want\",\"wanting\",\"war\",\"warlike\",\"warm\",\"warn\",\"wary\",\"wash\",\"waste\",\"wasteful\",\"watch\",\"water\",\"watery\",\"wave\",\"wax\",\"way\",\"weak\",\"wealth\",\"wealthy\",\"weary\",\"weather\",\"week\",\"weigh\",\"weight\",\"welcome\",\"wet\",\"wheel\",\"whimsical\",\"whine\",\"whip\",\"whirl\",\"whisper\",\"whispering\",\"whistle\",\"white\",\"whole\",\"wholesale\",\"wicked\",\"wide\",\"wiggly\",\"wild\",\"wilderness\",\"willing\",\"wind\",\"window\",\"windy\",\"wine\",\"wing\",\"wink\",\"winter\",\"wipe\",\"wire\",\"wiry\",\"wise\",\"wish\",\"wistful\",\"witty\",\"wobble\",\"woebegone\",\"woman\",\"womanly\",\"women\",\"wonder\",\"wonderful\",\"wood\",\"wooden\",\"wool\",\"woozy\",\"word\",\"work\",\"workable\",\"worm\",\"worried\",\"worry\",\"worthless\",\"wound\",\"wrap\",\"wrathful\",\"wreck\",\"wren\",\"wrench\",\"wrestle\",\"wretched\",\"wriggle\",\"wrist\",\"writer\",\"writing\",\"wrong\",\"wry\",\"x-ray\",\"yak\",\"yam\",\"yard\",\"yarn\",\"yawn\",\"year\",\"yell\",\"yellow\",\"yielding\",\"yoke\",\"young\",\"youthful\",\"yummy\",\"zany\",\"zealous\",\"zebra\",\"zephyr\",\"zesty\",\"zinc\",\"zip\",\"zipper\",\"zippy\",\"zoo\",\"zoom\"]\n\nexport default dictionary;","/* eslint-disable array-callback-return */\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass DisplayDefs extends Component {\n    constructor(){\n        super();\n        this.state = {\n            queryWord: '',\n            definitionArray: [],\n        }\n    }\n    \n    //watch for the props to change, if the queryProp changes then call the set definition function\n    //so we get the related definitions for our new word\n    componentDidUpdate(prevProps) {\n        if (prevProps.queryProp !== this.props.queryProp) {\n            this.setState({\n                queryWord: this.props.queryProp,\n            })\n            this.setDefinitions();\n        }\n    }\n\n    //main axios call to get an array of definitions based on our queryProp word.\n    setDefinitions = () => {\n        axios({\n            url: `https://www.dictionaryapi.com/api/v3/references/sd3/json/${this.props.queryProp}`,\n            method: 'GET',\n            dataType: 'json',\n            params: {\n                key: '2d1e7e13-d6a9-4925-80d7-eb9a0228d59f',\n            }\n        }).then( (response) => {\n\n            //Sometimes the dictionary will return only a root. Here we check to see if the word, as is, has one or more definitions.\n            // if it matches, filter our reponse and return only the definitions that match exactly.\n            //The hwi.hw keys often have multiple * characters in them, we use regex to remove them\n            let filteredArray = response.data.filter((each) => {\n                if(each.hwi.hw.replace(/\\*/g,'') === this.state.queryWord) {\n                    return each\n                }\n            })\n            this.setState({\n                definitionArray: filteredArray\n            })\n            \n            //if there are no exact matches in the previous function the array length will remain at 0\n            //when that happens we need to check for a \"base\" definition that we can use\n            //we confirm that the base is related to our original word by checking to see if the word is a \"stem\" of the base word, eg. running is a stem of run (the base word)\n            //also, double check that our original word doesn't match any of the original definitions, just in case\n            //filter the array to only include those for the new base\n            if(filteredArray.length === 0) {\n                filteredArray = response.data.filter((each) => {\n                    if (each.meta.stems.includes(this.state.queryWord) === true && each.hwi.hw.replace(/\\*/g,'') !== this.state.queryWord) {\n                        return each\n                    }\n                })\n                //this will set the word we are guessing to the base form.\n                //this is necessary because otherwise the given definitions may not match the word well.\n                this.props.rebaseWord(filteredArray[0].hwi.hw.replace(/\\*/g,''));\n                this.setState({                    \n                    queryWord: filteredArray[0].hwi.hw.replace(/\\*/g,''),\n                    definitionArray: filteredArray\n                })\n            }\n        })\n        //if the above methods don't work, or we don't find a definition for the initial word\n        //go back to the parent and get a new word and start again.\n        .catch(() => this.props.catchFunction);\n    }\n\n    render() {\n        return(\n            <div>\n                {\n                    //here we are returning each of the arrays of definitions we ended up with after filtering, and setting the \"type\" of the definition as the\n                    //header on a list to be displayed on the main page.\n                    //this could have been cleaned up, sometimes a word has multiple of the same \"type\" of definition because it can be defined in multiple ways.\n                    //eg, you will see noun twice on occasion.\n                    this.state.definitionArray.map((each,index) => {\n                        return (\n                        <>\n                        <h3>{each.fl}</h3>\n                        <ul>\n                        {each.shortdef.map((s,index)=>{\n                            return <li className=\"listStyle\"><p>{s}</p></li>\n                        })}\n                        </ul>\n                        </>\n                        )                       \n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default DisplayDefs;","import React, { Component } from 'react';\nimport dictionary from './dictionary';\nimport DisplayDefs from './DisplayDefs'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      definitionList: [],\n      correctWords: [],\n      missedWords: [],\n      rightWrong: null,\n      queryWord: '',\n      userInput: '',\n    }\n  }\n\n  //get a random number from the dictionary array\n  setQuery = () => {\n    let number = Math.floor(Math.random() * dictionary.length)\n    this.setState({\n        queryWord: dictionary[number]\n    })\n  }\n\n  //when component mounts, get the word we start with.\n  componentDidMount() {\n      this.setQuery();\n  }\n\n  //handles the user input for state as it's input.\n  //includes an if/else statement to deal with people attempting to put in spaces.\n  handleChange = (event) => {\n    if (event.currentTarget.value.includes(' ')) {\n      event.currentTarget.value = event.currentTarget.value.replace(/\\s/g, '');\n    }\n    this.setState({\n      userInput: event.target.value.toLowerCase(),\n      });\n  }\n\n  //used in the handleSubmit function below.\n  //push the correctly guessed word into a \"correct\" array for display further down the page.\n  //reset the user input, reset the right/wrong array and get anew word.\n  nextWord = () => {\n    let correctWords = this.state.correctWords;\n    correctWords.push(this.state.queryWord);\n    this.setState({\n      correctWords: correctWords,\n      userInput: '',\n      rightWrong: true,\n    })\n    this.setQuery();\n  }\n\n  //handles the check answer button\n  // if the answer matches the word we are guessing, awesome! Run the nextWord function to get a new word and push the currect word into a correctly guessed array for display.\n  // else, reset the user input and let them know the guess was wrong.\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.state.userInput === this.state.queryWord\n    ? \n      this.nextWord()\n    : \n    this.setState({\n      userInput: '',\n      rightWrong: false,\n    })\n  }\n\n  //Handles the submit button for \"I give up\". It takes the word, pushes it into a \"missed\" array for display on the page,\n  //and gets you a new word to guess. Resets the right/wrong array so correct/incorrect doesn't stay on page.\n  handleQuit = (event) => {\n    event.preventDefault();\n    let missedWords = this.state.missedWords;\n    missedWords.push(this.state.queryWord);\n    this.setState({\n      rightWrong: null,\n      missedWords: missedWords,\n    })\n    this.setQuery();\n  }\n\n  //occasionally the definitions are such that you need to take the base, or root form of the word as the supplied word is a plural, or doesn't have a useful definition. \n  //In these cases we need to change the word we test against to the base. This takes the child prop and sets it in the apps state.\n  rebaseWord = (updatedWord) => {\n    this.setState({\n      queryWord: updatedWord,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App wrapper\">\n        <h1>Guess the word!</h1>\n        <h2>Use the form below to guess the word based on the following definitions:</h2>\n        <div className=\"displayDefBorder\">\n          <DisplayDefs queryProp={this.state.queryWord} rebaseWord={this.rebaseWord} catchFunction={this.setQuery}/>\n        </div>\n        <form className='flexForm' action=\"submit\">\n          <label htmlFor=\"answer\" className=\"sr-only\">Guessing form</label>\n          <input onChange={this.handleChange} value={this.state.userInput} type=\"text\" id=\"answer\" placeholder={`First letter '${this.state.queryWord[0]}' - ${this.state.queryWord.length} letters`}/>\n          <button onClick={this.handleSubmit} name=\"check-answer\" value=\"check-answer\" > Check Answer</button>\n          <button onClick={this.handleQuit} name=\"give-up\" value=\"give-up\"> Give up</button>\n        </form>\n        {\n          this.state.rightWrong === null ? null : this.state.rightWrong === true ? <h3>Correct!</h3> : <h3>Incorrect, Try again!</h3>\n        }\n        <div className='listDiv'>\n        {\n          <div>\n            <h4>Correct Answers</h4>\n            <ul className='correctList'>\n            {this.state.correctWords.map((each)=>{\n              return(\n                <li><p>{each}</p></li>\n              )\n            })}\n            </ul>\n          </div>\n        }\n        {\n          <div>\n            <h4>Missed Words</h4>\n            <ul className='missedList'>\n            {this.state.missedWords.map((each)=>{\n              return(\n                <li><p>{each}</p></li>\n              )\n            })}\n            </ul>\n          </div>\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}